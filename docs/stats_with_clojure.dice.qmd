
---
format:
  html:
    toc: true
    toc-depth: 4
    theme: [cosmo, notebooks/custom.scss]
    output-file: stats_with_clojure.dice.html
fontsize: 0.9em
code-block-background: true
include-in-header: {text: '<link rel = "icon" href = "data:," />'}

---
<style></style><style>.printedClojure .sourceCode {
  background-color: transparent;
  border-style: none;
}
</style><style>.clay-limit-image-width .clay-image {max-width: 100%}
</style>
<script src="stats_with_clojure.dice_files/md-default0.js" type="text/javascript"></script><script src="stats_with_clojure.dice_files/md-default1.js" type="text/javascript"></script>

# Analysis of roll of dice

![](https://upload.wikimedia.org/wikipedia/commons/thumb/7/78/Schaumstoffw%C3%BCrfel.jpg/608px-Schaumstoffw%C3%BCrfel.jpg)

In this chapter let's analyze the roll of pair of dice, and see what odds of betting will make you win. For that let's define a variable named `faces`, that holds a range of numbers from 1 to 6. 


::: {.sourceClojure}
```clojure
(def faces (range 1 7))
```
:::



::: {.sourceClojure}
```clojure
faces
```
:::



::: {.printedClojure}
```clojure
(1 2 3 4 5 6)

```
:::


Now let's generate combinations of die throws. So in the code below `x` and `y` are variables that hold the numbers from 1 to 6. The `for` function generates a list of vectors containing all possible combinations of `x` and `y`.


::: {.sourceClojure}
```clojure
(def combinations
  (for [x faces y faces] [x y]))
```
:::



::: {.sourceClojure}
```clojure
combinations
```
:::



::: {.printedClojure}
```clojure
([1 1]
 [1 2]
 [1 3]
 [1 4]
 [1 5]
 [1 6]
 [2 1]
 [2 2]
 [2 3]
 [2 4]
 [2 5]
 [2 6]
 [3 1]
 [3 2]
 [3 3]
 [3 4]
 [3 5]
 [3 6]
 [4 1]
 [4 2]
 [4 3]
 [4 4]
 [4 5]
 [4 6]
 [5 1]
 [5 2]
 [5 3]
 [5 4]
 [5 5]
 [5 6]
 [6 1]
 [6 2]
 [6 3]
 [6 4]
 [6 5]
 [6 6])

```
:::


Now let's sum up those combinations:


::: {.sourceClojure}
```clojure
(map #(apply + %) combinations)
```
:::



::: {.printedClojure}
```clojure
(2
 3
 4
 5
 6
 7
 3
 4
 5
 6
 7
 8
 4
 5
 6
 7
 8
 9
 5
 6
 7
 8
 9
 10
 6
 7
 8
 9
 10
 11
 7
 8
 9
 10
 11
 12)

```
:::


Let's use `frequencies` to see which number comes up most often when summed up:


::: {.sourceClojure}
```clojure
(def frequency-of-sums (frequencies (map #(apply + %) combinations)))
```
:::



::: {.sourceClojure}
```clojure
frequency-of-sums
```
:::



::: {.printedClojure}
```clojure
{7 6, 4 3, 6 5, 3 2, 12 1, 2 1, 11 2, 9 4, 5 4, 10 3, 8 5}

```
:::


Now let's sort `frequency-of-sums` by its values:


::: {.sourceClojure}
```clojure
(sort-by val > frequency-of-sums)
```
:::



::: {.printedClojure}
```clojure
([7 6] [6 5] [8 5] [9 4] [5 4] [4 3] [10 3] [3 2] [11 2] [12 1] [2 1])

```
:::


Looks like when a pair of dice is thrown, number 7 comes up most often, followed by 6, 8, and 9. So better bet on number 7 when you throw a pair of dice.


## Plotting

TBD


```{=html}
<div style="background-color:grey;height:2px;width:100%;"></div>
```



```{=html}
<div><pre><small><small>source: <a href="https://github.com/scicloj/stats-with-clojure/blob/main/notebooks/stats_with_clojure/dice.clj">notebooks/stats_with_clojure/dice.clj</a></small></small></pre></div>
```
